2.0 Pro Experimental. Lacks access to real-time info and some Gemini features.
好的，這是一個更詳細的 AI Code Prompt，包含您所要求的細節：

AI Code Prompt: ARG AI 訂單 Web 系統 (Python, OpenAI, LangChain, RAG)

目標:

開發一個 ARG (Augmented Reality Game) AI 訂單 Web 系統，讓顧客可以透過 Chatbot 與 AI 店員互動並下訂單。系統需整合 OpenAI API (用於 Chatbot 對話) 和 LangChain (用於 RAG - Retrieval Augmented Generation，從店家提供的文檔中檢索資訊)。

系統描述:

顧客可以透過 Chatbot 詢問店家資訊 (例如菜單、營業時間、推薦商品等)。AI 店員會像真人一樣提供服務，並引導顧客完成訂購流程。訂單完成後，系統會自動生成：

顧客訂單確認頁面: 顯示格式化的訂單明細 (Bill)。
店家後台訂單記錄頁面: 顯示所有訂單的累積出貨列表。
Web 架構:

1. Chatbot 聊天介面 (仿 OpenAI Design):

使用者友善的聊天介面。
支援文字輸入和語音輸入 (可選)。
顯示 AI 店員的回覆和建議。
2. 後台店家設定介面:

系統 Prompt (System Context) 設定: 提供文字輸入欄位，讓店家設定 AI 店員的行為和回應風格 (例如：「你是一個熱情友善的服務員，會主動詢問顧客需求，並推薦招牌菜色。」)。設定完成後，系統會將 Prompt 儲存。
店家資訊上傳 (RAG Document): 提供檔案上傳功能 (支援 .txt, .pdf)，讓店家上傳菜單、產品目錄、活動資訊等文件。這些文件將作為 LangChain RAG 的知識庫。
3. 顧客訂單確認頁面:

訂單完成後 (顧客按下「訂單結束」按鈕)，顯示由 AI 整理的格式化訂單明細 (Bill)，包含商品名稱、數量、單價、總價等。
提供友善的介面讓顧客確認訂單內容。
4. 店家後台訂單記錄頁面:

顯示所有已完成訂單的列表。
提供「累積出貨列表」功能，AI 會根據所有訂單自動計算並整理出需要準備的商品總數量，方便店家備貨。
可依日期、訂單編號等條件篩選訂單。
(可選) 提供訂單狀態管理 (例如：已付款、已出貨、已完成)。
技術細節:

前端:

HTML, CSS, JavaScript (可考慮使用 React, Vue.js 或 Angular 等框架)。
與後端 API 互動 (例如使用 Fetch API 或 Axios)。
後端:

Python: 作為主要開發語言。
Web 框架: Flask 或 Django (Flask 較輕量，適合快速開發；Django 功能較完整，適合大型專案)。
OpenAI API: 用於 Chatbot 對話生成。
LangChain: 用於 RAG 功能，從店家上傳的文件中檢索資訊，提供 AI 店員更豐富的知識庫。
資料庫: (可選) 用於儲存訂單資料、顧客資料、店家設定等。可選擇 SQLite (輕量)、PostgreSQL 或 MySQL。
API 設計: RESTful API。
Prompt Engineering (針對 OpenAI 和 LangChain):

OpenAI (Chatbot):

System Prompt: 從後台設定介面取得店家設定的 System Context。
User Prompt: 顧客的輸入。
Assistant Prompt: AI 的回覆 (會參考 LangChain RAG 的結果)。
範例:
System: 你是一位熱情友善的飲料店服務員，名叫小晴。你會主動詢問顧客需求，並推薦招牌飲品。如果顧客沒有其他需求，請整理訂單並輸出 JSON 格式。
User: 我要一杯珍珠奶茶，少冰半糖。
Assistant: 好的，一杯珍珠奶茶，少冰半糖。請問還需要其他飲品或點心嗎？我們今天的招牌是黑糖珍珠鮮奶喔！
LangChain (RAG):

Query: 顧客的問題 (例如：「你們有什麼推薦的？」、「珍珠奶茶多少錢？」)。
Documents: 從後台設定介面上傳的文件中檢索。
Context: 將檢索到的相關資訊提供給 OpenAI Chatbot，作為生成回覆的參考。
輸出格式 (JSON):

當顧客完成訂單後，AI 需產生 JSON 格式的訂單資料，提供給後端處理。

範例:
JSON

{
  "order_id": "20231027001",
  "customer_name": "王小明",
  "order_time": "2023-10-27 14:30:00",
  "items": [
    {
      "item_name": "珍珠奶茶",
      "quantity": 1,
      "price": 60,
      "options": {
        "ice": "少冰",
        "sugar": "半糖"
      }
    },
    {
      "item_name": "雞排",
      "quantity": 1,
      "price": 80,
      "options": {}
    }
  ],
  "total_amount": 140
}
開發流程建議:

環境設定: 安裝 Python, Flask/Django, OpenAI, LangChain, 相關套件。
Web 框架搭建: 建立基本 Web 應用程式結構。
Chatbot 介面開發: 實作聊天介面，串接 OpenAI API。
後台設定介面開發: 實作 System Prompt 設定和文件上傳功能。
LangChain RAG 整合: 將上傳的文件處理成 LangChain 可用的格式，並實作 RAG 查詢功能。
訂單處理流程: 實作訂單生成、JSON 輸出、顧客訂單確認頁面、店家後台訂單記錄頁面。
測試與優化: 進行全面測試，並根據使用者回饋進行優化。
額外功能 (可選):

會員系統 (登入/註冊、會員資料管理、會員專屬優惠)。
支付整合 (串接第三方支付平台)。
數據分析 (分析熱門商品、顧客偏好等)。
語音辨識 (支援語音輸入)。
